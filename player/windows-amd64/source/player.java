/* autogenerated by Processing revision 1282 on 2023-08-31 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.Arrays;
import java.util.List;
import java.util.HashMap;
import java.util.Map;
import java.util.*;
import processing.video.*;
import spout.*;
import java.awt.geom.Rectangle2D.Float;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class player extends PApplet {







//import codeanticode.syphon.*;




HashMap<String, Playlist> playlists;
List<Description> dataDesc ;
List<Displayer> displays;

 public void settings() {
  //fullScreen(P3D, 1);
  size(300, 600, P3D);
}

 public void setup() {
  noCursor();
  //playlists = new HashMap<String, Playlist> ();

  //playlists.put("pentura", new Playlist(this, "pentura"));
  //playlists.put("wallpaper", new Playlist(this, "wallpaper"));
  //playlists.put("bavenoire", new Playlist(this, "bavenoire"));

  //playlists.get("pentura").add(0, 1, "pentura.mov");
  //  playlists.get("wallpaper").add(1, 1, "wallpaper.mov");
  //  playlists.get("wallpaper").add(1, 2, "wallpaper2.mov");
 // playlists.get("bavenoire").add(2, 1, "baveNoire.mov");

 // playlists.get("pentura").play();
  //  playlists.get("wallpaper").play();
 // playlists.get("bavenoire").play();

  dataDesc = (List<Description>) Arrays.asList(
    new Description(
    "pentura",
    2,
    (List<java.awt.geom.Rectangle2D.Float>) Arrays.asList(
    new java.awt.geom.Rectangle2D.Float(0.00f, 0.00f, 0.14f, 1.00f)
    )
    ),
    new Description(
    "pentura",
    1,
    (List<java.awt.geom.Rectangle2D.Float>) Arrays.asList(
    new java.awt.geom.Rectangle2D.Float(0.23f, 0.00f, 0.14f, 1.00f),
    new java.awt.geom.Rectangle2D.Float(0.43f, 0.00f, 0.14f, 1.00f),
    new java.awt.geom.Rectangle2D.Float(0.63f, 0.00f, 0.14f, 1.00f),
    new java.awt.geom.Rectangle2D.Float(0.83f, 0.00f, 0.14f, 1.00f)
    )
    ),
    new Description(
    "bave noire",
    3,
    (List<java.awt.geom.Rectangle2D.Float>) Arrays.asList(
    new java.awt.geom.Rectangle2D.Float(0.00f, 0.00f, 1.00f, 1.00f)
    )
    )
    );

  displays = new ArrayList<Displayer>();
  for (int i = 0; i < dataDesc.size(); i ++) {
    displays.add(new Displayer(dataDesc.get(i)));
  }

  background(0);
}


 public void draw() {
  /*for (Map.Entry<String, Playlist> set : playlists.entrySet()) {
    set.getValue().update();
  }*/
}
 public void keyReleased() {
  //if(key == '1')playlists.get("wallpaper").play(1, 1);
  //if(key == '2')playlists.get("wallpaper").play(1, 2);
}
class Description {
  String videoSrc;
  List<java.awt.geom.Rectangle2D.Float> cropeList;
  int width;
  int height;
  int locX = -1;
  int locY = -1;
  int screenNumber = -1;
  
  Description(String videoSrc, int screenNumber, List<java.awt.geom.Rectangle2D.Float> cropeList) {
    this.screenNumber = screenNumber;
    this.videoSrc = videoSrc;
    this.cropeList = cropeList;
  }
  Description(String videoSrc, int width, int height, List<java.awt.geom.Rectangle2D.Float> cropeList) {
    this(videoSrc, -1, cropeList);
    this.width = width;
    this.height = height;
  }
  Description(String videoSrc, int width, int height, int locX, int locY, List<java.awt.geom.Rectangle2D.Float> cropeList) {
    this(videoSrc, width, height, cropeList);
    this.locX = locX;
    this.locY = locY;
  }
   public void setVideoSrc(String videoSrc) {
    this.videoSrc = videoSrc;
  }
   public void setCropeList(ArrayList<java.awt.geom.Rectangle2D.Float> cropeList) {
    this.cropeList = cropeList;
  }
}
class Displayer extends PApplet {
  //SyphonClient client;
  Spout client;
  PGraphics movie;
  Description desc;
  
  public Displayer(Description desc) {
    super();
    this.desc = desc;
    PApplet.runSketch(new String[]{this.getClass().getName()}, this);
    surface.setTitle(desc.videoSrc);
    if (desc.locX != -1 && desc.locY != -1)
      surface.setLocation(desc.locX, desc.locY);
    
  }

  public void settings() {
    if (desc.screenNumber == -1) {
      size(desc.width, desc.height, P3D);
    } else {
      fullScreen(P3D, desc.screenNumber);
    }
  }

  public void setup() { 
    noCursor();
    //client = new SyphonClient(this, "", desc.videoSrc);
    client = new Spout(this);
    client.setReceiverName(desc.videoSrc);
    background(0);
  }

  public void draw() {
    //if (!client.newFrame()) return;
    //movie = client.getGraphics(movie);
    movie = client.receiveTexture(movie);


    float _size = 1.0f/desc.cropeList.size();
    for (int i = 0; i < desc.cropeList.size(); i ++) {
      pushMatrix();
      translate(i * width * _size, height);
      scale(1, -1);
      drawFrame(movie, width * _size, desc.cropeList.get(i));
      popMatrix();
    }
  }

   public void drawFrame(PImage src, float width, java.awt.geom.Rectangle2D.Float dimension) {
    pushMatrix();

    

    noStroke();
    beginShape();
    texture(src);
    vertex(0, 0, dimension.x * src.width, dimension.y * src.height);
    vertex(width, 0, (dimension.x + dimension.width) * src.width, dimension.y * src.height);
    vertex(width, height, (dimension.x + dimension.width) * src.width, (dimension.y + dimension.height) * src.height);
    vertex(0, height, dimension.x * src.width, (dimension.y + dimension.height) * src.height);
    endShape();
    popMatrix();
  }
}

public class Playlist {
  HashMap< Map.Entry<Integer, Integer>, Movie> playlist;
  PApplet p;
  Map.Entry<Integer, Integer> currentKey;
  //SyphonServer server;
  Spout server;

  Playlist(PApplet p, String serverName) {
    this.p = p;
    playlist = new HashMap<Map.Entry<Integer, Integer>, Movie>();
    //server = new SyphonServer(p, serverName);
    server = new Spout(p);
    server.setSenderName(serverName);
  }

   public void add(int channel, int pitch, String MovieFile) {
    playlist.put(this.toKey(channel, pitch), new Movie(p, MovieFile));
  }

   public void play(int channel, int pitch) {
     Map.Entry<Integer, Integer> key = this.toKey(channel, pitch);
    if (!playlist.containsKey(key))return;
    this.play(key);
  }

   public void play( Map.Entry<Integer, Integer> key) {
    if (currentKey!= null)playlist.get(currentKey).stop();
    currentKey = key;
    playlist.get(currentKey).loop();
  }

   public void play() {
    if (currentKey!= null)playlist.get(currentKey).stop();
    Map.Entry<Integer, Integer> entry = playlist.keySet().iterator().next();
    play(entry);
  }

    public Map.Entry<Integer, Integer> toKey(int channel, int pitch) {
    return new AbstractMap.SimpleEntry<Integer, Integer>(channel, pitch);
  }

   public void update() {
    if (!playlist.get(currentKey).available())return;
    playlist.get(currentKey).read();
    //server.sendImage(playlist.get(currentKey));
    server.sendTexture(playlist.get(currentKey));
  }
}


  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "player" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
